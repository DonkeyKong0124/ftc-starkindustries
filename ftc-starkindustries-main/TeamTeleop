package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.util.ElapsedTime;
import org.firstinspires.ftc.robotcore.external.navigation.CurrentUnit;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;

@TeleOp(name = "Tele", group = "Linear OpMode")
public class TeamCode extends LinearOpMode {

    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor rightFrontWheel = null;
    private DcMotor rightRearWheel = null;
    private DcMotor leftFrontWheel = null;
    private DcMotor leftRearWheel = null;

    private DcMotor leftLinearSlide = null;
    private DcMotor rightLinearSlide = null;
    private DcMotor horizontalSlide = null;

    private Servo verticalClaw = null;
    private Servo horizontalClaw = null;

    @Override
    public void runOpMode() {

        // Initialize hardware variables.
        rightFrontWheel = hardwareMap.get(DcMotor.class, "frontRight");
        rightRearWheel = hardwareMap.get(DcMotor.class, "backRight");
        leftFrontWheel = hardwareMap.get(DcMotor.class, "frontLeft");
        leftRearWheel = hardwareMap.get(DcMotor.class, "backLeft");

        leftLinearSlide = hardwareMap.get(DcMotor.class, "linearSlideLeft");
        rightLinearSlide = hardwareMap.get(DcMotor.class, "linearSlideRight");
        horizontalSlide = hardwareMap.get(DcMotor.class, "horizontalSlide");

        verticalClaw = hardwareMap.get(Servo.class, "verticalClaw");
        horizontalClaw = hardwareMap.get(Servo.class, "horizontalClaw");

        // Set motor directions
        rightFrontWheel.setDirection(DcMotor.Direction.FORWARD);
        rightRearWheel.setDirection(DcMotor.Direction.FORWARD);
        leftFrontWheel.setDirection(DcMotor.Direction.REVERSE);
        leftRearWheel.setDirection(DcMotor.Direction.REVERSE);

        leftLinearSlide.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightLinearSlide.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        horizontalSlide.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // Initialize telemetry
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        waitForStart();
        runtime.reset();

        while (opModeIsActive()) {
            // ------------ WHEELS: Strafing and Yawing ------------ //
            double axialPower = -gamepad1.left_stick_y;  // Forward/Backward
            double lateralPower = gamepad1.left_stick_x; // Strafing (sideways)
            double yawPower = gamepad1.right_stick_x;    // Turning (rotation)

            // Mecanum wheel power calculations
            double frontLeftPower = axialPower + lateralPower + yawPower;
            double frontRightPower = axialPower - lateralPower - yawPower;
            double rearLeftPower = axialPower - lateralPower + yawPower;
            double rearRightPower = axialPower + lateralPower - yawPower;

            // Set power to the motors
            leftFrontWheel.setPower(frontLeftPower);
            rightFrontWheel.setPower(frontRightPower);
            leftRearWheel.setPower(rearLeftPower);
            rightRearWheel.setPower(rearRightPower);

            // ------------ LINEAR SLIDES ------------ //
            double verticalUpPower = -gamepad1.right_stick_y; // Up/Down on right stick
            leftLinearSlide.setPower(verticalUpPower);
            rightLinearSlide.setPower(verticalUpPower);

            // ------------ HORIZONTAL SLIDE ------------ //
            if (gamepad1.left_trigger > 0) {
                horizontalSlide.setPower(gamepad1.left_trigger); // Forward
            } else if (gamepad1.right_trigger > 0) {
                horizontalSlide.setPower(-gamepad1.right_trigger); // Backward
            } else {
                horizontalSlide.setPower(0); // Stop
            }

            // ------------ CLAW CONTROL ------------ //
            verticalClaw.scaleRange(0.1, 0.8);
            horizontalClaw.scaleRange(0.1, 0.8);

            if (gamepad1.b) verticalClaw.setPosition(0.1); // Open vertical claw
            if (gamepad1.x) verticalClaw.setPosition(1.0); // Close vertical claw
            if (gamepad1.y) horizontalClaw.setPosition(0.1); // Open horizontal claw
            if (gamepad1.a) horizontalClaw.setPosition(1.0); // Close horizontal claw

            // ------------ TELEMETRY ------------ //
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Left Linear Slide Position", leftLinearSlide.getCurrentPosition());
            telemetry.addData("Right Linear Slide Position", rightLinearSlide.getCurrentPosition());
            telemetry.addData("Vertical Claw Position", verticalClaw.getPosition());
            telemetry.addData("Horizontal Claw Position", horizontalClaw.getPosition());
            telemetry.update();
        }
    }
}
