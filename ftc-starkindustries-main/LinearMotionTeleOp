// CODE FOR THE CONTROLLER PORTION

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name = "Tele", group = "Linear OpMode")
public class MyBasicOmniTeleOpMode extends LinearOpMode {

    // Declare OpMode members for motors and servos.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor rightFrontWheel = null; // Forward
    private DcMotor rightRearWheel = null; // Forward
    private DcMotor leftFrontWheel = null; // Backward
    private DcMotor leftRearWheel = null; // Backward

    private DcMotor LeftlinearSlides = null; // Declare REV Core Hex Motor here
    private DcMotor RightlinearSlides = null; // Declare REV Core Hex Motor here
    private DcMotor horizontalSlide = null; // Declare REV Core Hex Motor here

    private Servo verticalClaw = null;
    private Servo horizontalClaw = null;

    private double VERTICAL_HOOK_POSITION = 800;
    private double VERTICAL_PERIMETER_POSITION = 300;
    
    public static final DcMotor.RunMode RUN_TO_POSITION;

    private double horizontalSlidePosition = gamepad1.right_stick_y;

    @Override
    public void runOpMode() {

        // Initialize hardware variables with names matching the robot configuration.
        rightFrontWheel = hardwareMap.get(DcMotor.class, "frontRight"); // Forward
        rightRearWheel = hardwareMap.get(DcMotor.class, "backRight"); // Forward
        leftFrontWheel = hardwareMap.get(DcMotor.class, "frontLeft"); // Backward
        leftRearWheel = hardwareMap.get(DcMotor.class, "backLeft"); // Backward

        linearSlideRight = hardwareMap.get(DcMotor.class, "linearSlideRight"); // Initialize the Core Hex Motor for the right linear slide
        linearSlideLeft = hardwareMap.get(DcMotor.class, "linearSlideLeft"); // Initialize the Core Hex Motor for the left linear slide
        horizontalSlide = hardwareMap.get(DcMotor.class, "horizontalSlide"); // Initialize the Core Hex Motor for the horizontal slide

        verticalClaw = hardwareMap.get(Servo.class, "verticalClaw");
        horizontalClaw = hardwareMap.get(Servo.class, "horizontalClaw");

        //set Motor Mode
        linearSlideRight.setMode(RUN_TO_POSITION);
        linearSlideLeft.setMode(RUN_TO_POSITION);
        

        // Set motor directions.
        rightFrontWheel.setDirection(DcMotor.Direction.FORWARD);
        rightRearWheel.setDirection(DcMotor.Direction.FORWARD);
        leftFrontWheel.setDirection(DcMotor.Direction.REVERSE);
        leftRearWheel.setDirection(DcMotor.Direction.REVERSE);

        // Display status and update telemetry.
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        waitForStart();
        runtime.reset();


        // Main loop
        while (opModeIsActive()) {

            // ------------ WHEELS -------------- //

            // AXIAL - Forward and Backward
            double axialPower = -gamepad1.left_stick_y;
            // LATERAL - Left and Right
            double lateralPower = gamepad1.left_stick_x/2;
            // YAW - Clockwise and Anti-clockwise
            double yawPower = gamepad1.right_stick_x;

            // Set motor power for drivetrain.
            rightFrontWheel.setPower(axialPower - lateralPower - yawPower);
            rightRearWheel.setPower(-axialPower + lateralPower - yawPower);

            leftFrontWheel.setPower(axialPower + lateralPower + yawPower);
            leftRearWheel.setPower(-axialPower - lateralPower + yawPower);


            // ------------ LINEAR SLIDES -------------- //

        // This preset is for raising the slides above the high chamber  
        if (gamepad1.dpad_up) 
        {
            if (verticalSlideLeft.getTargetPosition() != VERTICAL_HOOK_POSITION)
                {
                    verticalSlideLeft.setTargetPosition(VERTICAL_HOOK_POSITION); // Move to position 
                    verticalSlideRight.setTargetPosition(VERTICAL_HOOK_POSITION); // Move to position
                }
            verticalSlideRight.setTargetPosition(650); //Move down and hook specimen
        }
        // Preset to grab specimen from the observation zone perimeter
        else if (gamepad1.dpad_down)
        {
            // Checks if the claw is closed then opens if true
            if (horizontalClaw.getPosition() == 0.0)
            {
                horizontalClaw.setPosition(1.0); //opens claw
            }
            // Move the vertical slide to perimeter position
            verticalSlideLeft.setTargetPosition(VERTICAL_PERIMETER_POSITION); // Move to position
            verticalSlideRight.setTargetPosition(VERTICAL_PERIMETER_POSITION); // Move to position
            // Close the claw
            horizontalClaw.setPower(0.0);
            // Lift the vertical slide to high chamber hook position
            verticalSlideLeft.setTargetPosition(VERTICAL_HOOK_POSITION); // Move to position 1000
            verticalSlideRight.setTargetPosition(VERTICAL_HOOK_POSITION); // Move to position 1000
            
        }


            // ------------ CLAW -------------- //

            horizontalClaw.scaleRange(0.1, 0.8);
            verticalClaw.scaleRange(0.1, 0.8);

            // Vertical Claw Open/Close
            if (gamepad1.b) {
                verticalClaw.setPosition(0.1); // Open claw
            }
            if (gamepad1.x) {
                verticalClaw.setPosition(1.0); // Close claw
            }

            // Horizontal Claw Open/Close
            if (gamepad1.y) {
                horizontalClaw.setPosition(0.0); // Open claw
            }
            if (gamepad1.a) {
                horizontalClaw.setPosition(1.0); // Close claw
            }


            // ---------------- Horizontal slide -------------------

            
            //horizontalSlide.setPosition(gamepad1.right_stick_y);

            //if the right stick goes up set the motor direction forward
            if (gamepad1.right_stick_y.getPosition() > 0.0)
            {
                horizontalSlide.setDirection(DcMotor.Direction.FORWARD); // sets the motor to go forward
            }
            //if the right stick does down set the motor reverse
            else if (gamepad1.right_stick_y.getPosition() < 0.0)
            {
                horizontalSlide.setDirection(DcMotor.Direction.REVERSE); // sets the motor reverse
            }
            else
            {
                // sets the position of the slide back to zero
                horizontalSlide.setPosition(0.0);
            }


// TODO: UPDATE TELEMETRY CONSOLE OUTPUT VALUES

            // Display telemetry data.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motor Power", "LF (%.2f), RF (%.2f), LB (%.2f), RB (%.2f)",
                    leftFrontWheel.getPower(), rightFrontWheel.getPower(), leftRearWheel.getPower(), rightRearWheel.getPower());

            telemetry.addData("linearSlides Power", "%.2f", linearSlides.getPower());
            telemetry.addData("linearSlides Direction", "%s", linearSlides.getDirection());
            telemetry.addData("linearSlides Current Position", "%d", linearSlides.getCurrentPosition());
            telemetry.addData("linearSlides Target Position", "%d", linearSlides.getTargetPosition());

            telemetry.addData("BottomLinearSlide Power", "%.2f", linearSlide.getPower());
            telemetry.addData("BottomLinearSlide Direction", "%s", linearSlide.getDirection());
            telemetry.addData("BottomLinearSlide Current Position", "%d", linearSlide.getCurrentPosition());
            telemetry.addData("BottomLinearSlide Target Position", "%d", linearSlide.getTargetPosition());

            telemetry.addData("Claw Servo MIN Position", "%.2f", claw.MIN_POSITION);
            telemetry.addData("Claw Servo MAX Position", "%.2f", claw.MAX_POSITION);
            telemetry.addData("Claw Servo Current Position", "%.2f", claw.getPosition());
            telemetry.addData("Claw Servo Direction", "%s", claw.getDirection());

            telemetry.addData("LinearClaw Servo MIN Position", "%.2f", linearClaw.MIN_POSITION);
            telemetry.addData("LinearClaw Servo MAX Position", "%.2f", linearClaw.MAX_POSITION);
            telemetry.addData("LinearClaw Servo Current Position", "%.2f", linearClaw.getPosition());
            telemetry.addData("LinearClaw Servo Direction", "%s", linearClaw.getDirection());
            telemetry.update();
        }
    }
}
