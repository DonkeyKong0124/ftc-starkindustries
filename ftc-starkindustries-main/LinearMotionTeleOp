// CODE FOR THE CONTROLLER PORTION

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name = "Tele", group = "Linear OpMode")
public class MyBasicOmniTeleOpMode extends LinearOpMode {

    // Declare OpMode members for motors and servos.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor rightFrontWheel = null; // Forward
    private DcMotor rightRearWheel = null; // Forward
    private DcMotor leftFrontWheel = null; // Backward
    private DcMotor leftRearWheel = null; // Backward

    private DcMotor linearSlides = null; // Declare REV Core Hex Motor here
    private DcMotor linearSlide = null; // Declare REV Core Hex Motor here

    private Servo linearClaw = null;
    private Servo claw = null;

    @Override
    public void runOpMode() {

        // Initialize hardware variables with names matching the robot configuration.
        rightFrontWheel = hardwareMap.get(DcMotor.class, "frontRight"); // Forward
        rightRearWheel = hardwareMap.get(DcMotor.class, "backRight"); // Forward
        leftFrontWheel = hardwareMap.get(DcMotor.class, "frontLeft"); // Backward
        leftRearWheel = hardwareMap.get(DcMotor.class, "backLeft"); // Backward

        linearSlideRight = hardwareMap.get(DcMotor.class, "linearSlideRight"); // Initialize the Core Hex Motor
        linearSlideLeft = hardwareMap.get(DcMotor.class, "linearSlideLeft"); // Initialize the Core Hex Motor

        linearClaw = hardwareMap.get(Servo.class, "linearClaw");
        claw = hardwareMap.get(Servo.class, "claw");

        // Set motor directions.
        rightFrontWheel.setDirection(DcMotor.Direction.FORWARD);
        rightRearWheel.setDirection(DcMotor.Direction.FORWARD);
        leftFrontWheel.setDirection(DcMotor.Direction.REVERSE);
        leftRearWheel.setDirection(DcMotor.Direction.REVERSE);

        // Display status and update telemetry.
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        waitForStart();
        runtime.reset();


        // Main loop
        while (opModeIsActive()) {

            // ------------ WHEELS -------------- //

            // AXIAL - Forward and Backward
            double axialPower = -gamepad1.left_stick_y;
            // LATERAL - Left and Right
            double lateralPower = gamepad1.left_stick_x/2;
            // YAW - Clockwise and Anti-clockwise
            double yawPower = gamepad1.right_stick_x;

            // Set motor power for drivetrain.
            rightFrontWheel.setPower(axialPower - lateralPower - yawPower);
            rightRearWheel.setPower(-axialPower + lateralPower - yawPower);

            leftFrontWheel.setPower(axialPower + lateralPower + yawPower);
            leftRearWheel.setPower(-axialPower - lateralPower + yawPower);


            // ------------ LINEAR SLIDES -------------- //

            
        if (gamepad1.dpad_up) 
            {
                slideMotor.setTargetPosition(1000); // Move to position 1000
                slideMotor.setPower(1.0); // Apply power
            }
        else if (gamepad1.dpad_down)
            {
                slideMotor.setTargetPosition(0); // Move to position 0
                slideMotor.setPower(1.0); // Apply power
            }


            // ------------ LINEAR CLAW -------------- //

            claw.scaleRange(0.1, 0.8);
            linearClaw.scaleRange(0.1, 0.8);

            // Linear Claw Open/Close
            if (gamepad1.b) {
                linearClaw.setPosition(0.1); // Open claw
            }
            if (gamepad1.x) {
                linearClaw.setPosition(1.0); // Close claw
            }

            // Claw Open/Close
            if (gamepad1.y) {
                claw.setPosition(0.1); // Open claw
            }
            if (gamepad1.a) {
                claw.setPosition(1.0); // Close claw
            }



            // Display telemetry data.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motor Power", "LF (%.2f), RF (%.2f), LB (%.2f), RB (%.2f)",
                    leftFrontWheel.getPower(), rightFrontWheel.getPower(), leftRearWheel.getPower(), rightRearWheel.getPower());

            telemetry.addData("linearSlides Power", "%.2f", linearSlides.getPower());
            telemetry.addData("linearSlides Direction", "%s", linearSlides.getDirection());
            telemetry.addData("linearSlides Current Position", "%d", linearSlides.getCurrentPosition());
            telemetry.addData("linearSlides Target Position", "%d", linearSlides.getTargetPosition());

            telemetry.addData("BottomLinearSlide Power", "%.2f", linearSlide.getPower());
            telemetry.addData("BottomLinearSlide Direction", "%s", linearSlide.getDirection());
            telemetry.addData("BottomLinearSlide Current Position", "%d", linearSlide.getCurrentPosition());
            telemetry.addData("BottomLinearSlide Target Position", "%d", linearSlide.getTargetPosition());

            telemetry.addData("Claw Servo MIN Position", "%.2f", claw.MIN_POSITION);
            telemetry.addData("Claw Servo MAX Position", "%.2f", claw.MAX_POSITION);
            telemetry.addData("Claw Servo Current Position", "%.2f", claw.getPosition());
            telemetry.addData("Claw Servo Direction", "%s", claw.getDirection());

            telemetry.addData("LinearClaw Servo MIN Position", "%.2f", linearClaw.MIN_POSITION);
            telemetry.addData("LinearClaw Servo MAX Position", "%.2f", linearClaw.MAX_POSITION);
            telemetry.addData("LinearClaw Servo Current Position", "%.2f", linearClaw.getPosition());
            telemetry.addData("LinearClaw Servo Direction", "%s", linearClaw.getDirection());
            telemetry.update();
        }
    }
}
